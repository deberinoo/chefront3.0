// documents for registration upload
router.post('/institutionDocumentUpload', (req, res) => {
    console.log(req.file);
    institutionDocumentUpload(req, res, async(err) => {
        console.log("Institution's document upload printing req.file.filename");
        console.log(req.file);
        if (err) {
            res.json({err: err});
        }
        else {
            if (req.file === undefined) {
                res.json({err: err});
            } else {
                res.json({path: `/pendingdocs/${req.file.filename}`, file: `${req.file.filename}`});
            }
        }
    });
});

var uploadnone = multer()
router.post('/institutionregistration', [
    body('instituteName').not().isEmpty().trim().escape().withMessage("Institution Name is invalid"),
    body('instituteAddress').not().isEmpty().trim().escape().withMessage("Address is invalid"),
    body('institutePC').not().isEmpty().trim().escape().withMessage("Postal code is invalid"),
    body('instituteEmail').trim().isEmail().withMessage("Email must be a valid email").normalizeEmail().toLowerCase(),
    body('instituteNo').not().isEmpty().trim().escape().withMessage("Phone number is invalid"),
    body('instituteUrl').not().isEmpty().withMessage("Please enter url"),
    body('trueFileDocumentName').not().isEmpty().trim().escape().withMessage("Please upload a proper document. Only accept the following format: doc, docx, odt, pdf, zip"),
    body('IAFname').not().isEmpty().trim().escape().withMessage("First name is invalid"),
    body('IALname').not().isEmpty().trim().escape().withMessage("last name is invalid"),
    body('IANo').not().isEmpty().trim().escape().withMessage("Phone number is invalid"),
    body('IAEmail').trim().isEmail().withMessage("Email must be a valid email").normalizeEmail().toLowerCase()
],uploadnone.none(), (req, res) => {
    console.log("Processing institution registration form now.....");
    let {instituteName, instituteAddress, institutePC, instituteNo, instituteEmail, instituteUrl, trueFileDocumentName, IAFname, IALname, IANo, IAEmail} = req.body;
    let errors = [];
    console.log("Here is the document uploaded: ", trueFileDocumentName);
    const validatorErrors = validationResult(req);
    if (!validatorErrors.isEmpty()) { //if isEmpty is false
        console.log("There are errors in the form, unable to proceed");
        validatorErrors.array().forEach(error => {
            console.log(error);
            errors.push({ text: error.msg })
        })
        res.render('institution/registration', {
            errors,
            instituteName,
            instituteAddress,
            institutePC,
            instituteEmail,
            instituteUrl,
            IAFname,
            IALname,
            IANo,
            IAEmail,
            instituteNo
        });

    } else {
        console.log("Validating if the institution has already been registered....");
        Institution.findOne({
            where: {
                name: instituteName
            }
        }).then(institution => {
            if (institution) {
                console.log("Instituion already exist. unable to proceed.");
                res.render('institution/registration', {
                    error: instituteName + ' has already been registered. If you did not register your institution, please contact TutorHub immediately.',
                    instituteName,
                    instituteAddress,
                    institutePC,
                    instituteEmail,
                    instituteUrl,
                    IAFname,
                    IALname,
                    IANo,
                    IAEmail,
                    instituteNo
                });
            } else {
                console.log("Institution name is available.");
                console.log("Validating if the email for institution has already been registered...");
                Institution.findOne({
                    where: {
                        email: instituteEmail
                    }
                }).then(institutione => {
                    if (institutione) {
                        console.log("Instituion email already exist. unable to proceed.");
                        res.render('institution/registration', {
                            error: instituteEmail + ' has already been registered. If you think there must have been a mistake, please contact TutorHub immediately.',
                            instituteName,
                            instituteAddress,
                            institutePC,
                            instituteEmail,
                            instituteUrl,
                            IAFname,
                            IALname,
                            IANo,
                            IAEmail,
                            instituteNo
                        });
                    } else {
                        console.log("Institution email is available.");
                        console.log("Validating if the Admin account exist.........");
                        User.findOne({
                            where: {
                                Email: IAEmail
                            }
                        }).then(user => {
                            if (user) {
                                console.log("User Account already exist. Unable to proceed.");
                                res.render('institution/registration', {
                                    error: IAEmail + ' has already been registered. Please use another email.',
                                    instituteName,
                                    instituteAddress,
                                    institutePC,
                                    instituteEmail,
                                    instituteUrl,
                                    IAFname,
                                    IALname,
                                    IANo,
                                    instituteEmail,
                                    instituteNo
                                });
                            } else {
                                console.log("User email is available.");
                                // Create pending institution
                                console.log("Uploading to pending institution...........");
                                PendingInstitution.create({ 
                                    name: instituteName, 
                                    address: instituteAddress, 
                                    postalcode: institutePC, 
                                    iemail: instituteEmail, 
                                    website: instituteUrl, 
                                    officeno: instituteNo, 
                                    document: trueFileDocumentName, 
                                    fname: IAFname, 
                                    lname: IALname, 
                                    phoneno: IANo, 
                                    aemail: IAEmail 
                                })
                                .catch(err => console.log(err));
                                console.log("Upload to pending institution completed.");
                                console.log("Registration form process has been completed. Redirecting now...");
                                res.redirect('/institution/showcompletion');
                            }
                        }).catch(err => console.log(err));
                    }
                }).catch(err => console.log(err));
            }
        }).catch(err => console.log(err));
    }
});

// registration completed
router.get('/showcompletion', (req, res) => {
    res.render('institution/completion')
});